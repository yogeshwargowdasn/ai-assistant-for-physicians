1.File: controllers/appointment_controller.py:
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required, current_user
from app.models.appointment import Appointment
from app.models.user import User
from app import db
from datetime import datetime

appointment_bp = Blueprint('appointment', __name__)


@appointment_bp.route('/create_appointment', methods=['GET', 'POST'])
@login_required
def create_appointment():
    doctors = User.query.filter_by(role='doctor').all()
    if request.method == 'POST':
        doctor_id = request.form['doctor_id']
        reason = request.form['reason']
        appointment_date_str = request.form['appointment_date']
        time_str = request.form['appointment_time']
        appointment_datetime = datetime.strptime(f"{appointment_date_str} {time_str}", '%Y-%m-%d %H:%M')
        # use appointment_datetime instead of just appointment_date


        new_appointment = Appointment(
            patient_id=current_user.id,
            doctor_id=doctor_id,
            reason=reason,
            date=appointment_datetime
        )
        db.session.add(new_appointment)
        db.session.commit()
        flash("Appointment created!", "success")
        return redirect(url_for('auth.dashboard'))
    return render_template('create_appointment.html', doctors=doctors)

@appointment_bp.route('/view_appointments')
@login_required
def view_appointments():
    if current_user.role == 'admin':
        appointments = Appointment.query.all()
    elif current_user.role == 'doctor':
        appointments = Appointment.query.filter_by(doctor_id=current_user.id).all()
    elif current_user.role == 'patient':
        appointments = Appointment.query.filter_by(patient_id=current_user.id).all()
    else:
        appointments = []

    return render_template('view_appointments.html', appointments=appointments)



@appointment_bp.route('/edit_appointment/<int:appointment_id>', methods=['GET', 'POST'])
@login_required
def edit_appointment(appointment_id):
    appointment = Appointment.query.get_or_404(appointment_id)

    # Only allow doctor or admin to edit
    if current_user.role not in ['admin', 'doctor']:
        flash("Unauthorized access", "danger")
        return redirect(url_for('auth.dashboard'))

    if request.method == 'POST':
        appointment.reason = request.form['reason']
        db.session.commit()
        flash("Appointment updated successfully!", "success")
        return redirect(url_for('appointment.view_appointments'))

    return render_template('edit_appointment.html', appointment=appointment)


@appointment_bp.route('/delete_appointment/<int:appointment_id>', methods=['GET'])
@login_required
def delete_appointment(appointment_id):
    appointment = Appointment.query.get_or_404(appointment_id)

    print("DELETE appointment POST received")


    # Only allow doctor or admin to delete
    if current_user.role not in ['admin', 'doctor']:
        flash("Unauthorized access", "danger")
        return redirect(url_for('auth.dashboard'))

    db.session.delete(appointment)
    db.session.commit()
    flash("Appointment deleted successfully!", "success")
    return redirect(url_for('appointment.view_appointments'))

2.File: controllers/auth_controller.py:
from flask import Blueprint, render_template, redirect, url_for, request, flash
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import login_user, login_required, logout_user, current_user
from app.models.user import User
from app import db
from urllib.parse import urlparse, urljoin

auth_bp = Blueprint('auth', __name__)

# Helper function to validate redirect URLs
def is_safe_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc

@auth_bp.route('/')
def index():
    return redirect(url_for('auth.login'))

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('auth.dashboard'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password, password):
            login_user(user, remember=True)
            next_page = request.args.get('next')
            if next_page and is_safe_url(next_page):
                return redirect(next_page)
            return redirect(url_for('auth.dashboard'))
        
        flash("Invalid credentials", "danger")

    return render_template('login.html')

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('auth.dashboard'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']

        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            flash("Username already exists", "warning")
            return redirect(url_for('auth.register'))

        hashed_pw = generate_password_hash(password)
        new_user = User(username=username, password=hashed_pw, role=role)
        db.session.add(new_user)
        db.session.commit()
        flash("Account created. Please log in.", "success")
        return redirect(url_for('auth.login'))

    return render_template('register.html')

@auth_bp.route('/dashboard')
@login_required
def dashboard():
    # Optional: role-based access control
    # if current_user.role != 'admin':
    #     flash("Access denied: Admins only", "danger")
    #     return redirect(url_for('auth.login'))
    return render_template('dashboard.html', user=current_user)

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash("You have been logged out.", "info")
    return redirect(url_for('auth.login'))

3.File: controllers/report_controller.py:
from flask import Blueprint, render_template, request, redirect, url_for, flash, send_from_directory, current_app
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
import os
from app import db
from app.models.report import MedicalReport  # Ensure this matches your model name

report_bp = Blueprint('report', __name__)

ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx', 'png'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# ------------------------
# Upload Report
# ------------------------
@report_bp.route('/upload_report', methods=['GET', 'POST'])
@login_required
def upload_report():
    if request.method == 'POST':
        file = request.files.get('file')
        if not file or file.filename == '':
            flash("No file selected", "danger")
            return redirect(request.url)

        if allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            new_report = MedicalReport(user_id=current_user.id, filename=filename)
            db.session.add(new_report)
            db.session.commit()

            flash("Report uploaded successfully!", "success")
            return redirect(url_for('report.view_reports'))  # redirect to view reports
        else:
            flash("Invalid file format", "danger")
            return redirect(request.url)

    return render_template('upload_report.html')


# ------------------------
# View Reports
# ------------------------
@report_bp.route('/view_reports')
@login_required
def view_reports():
    if current_user.role == 'admin':
        reports = MedicalReport.query.all()
    else:
        reports = MedicalReport.query.filter_by(user_id=current_user.id).all()

    return render_template('view_reports.html', reports=reports)


# ------------------------
# Delete Report
# ------------------------
@report_bp.route('/delete_report/<int:report_id>')
@login_required
def delete_report(report_id):
    report = MedicalReport.query.get_or_404(report_id)

    # Only allow deleting your own reports, unless admin
    if report.user_id != current_user.id and current_user.role != 'admin':
        flash("You are not authorized to delete this report.", "danger")
        return redirect(url_for('report.view_reports'))

    try:
        os.remove(os.path.join(current_app.config['UPLOAD_FOLDER'], report.filename))
    except Exception as e:
        flash(f"Error deleting file: {e}", "danger")

    db.session.delete(report)
    db.session.commit()
    flash("Report deleted successfully.", "success")
    return redirect(url_for('report.view_reports'))


# ------------------------
# Download Report
# ------------------------
@report_bp.route('/download_report/<filename>')
@login_required
def download_report(filename):
    return send_from_directory(current_app.config['UPLOAD_FOLDER'], filename, as_attachment=True)

4.File: models/appointment.py:
from app import db
from datetime import datetime

class Appointment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    patient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    doctor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    date = db.Column(db.DateTime, nullable=False)
    reason = db.Column(db.String(255), nullable=False)

    doctor = db.relationship('User', foreign_keys=[doctor_id], backref='doctor_appointments', lazy=True)
    patient = db.relationship('User', foreign_keys=[patient_id], backref='patient_appointments', lazy=True)

5.File: models/report.py:
from app import db
from datetime import datetime

class MedicalReport(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    upload_date = db.Column(db.DateTime, default=datetime.utcnow)

6.File: models/user.py:
from app import db
from flask_login import UserMixin
from app import login_manager

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(20), nullable=False)  # 'admin', 'doctor', 'patient'

    def get_id(self):
        return str(self.id)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

7.File: static/css/style.css:
no css file code

8.File: static/js/validation.js:
document.addEventListener("DOMContentLoaded", function () {
  const fileInput = document.getElementById("fileInput");
  const uploadBtn = document.getElementById("uploadBtn");

  if (fileInput && uploadBtn) {
    fileInput.addEventListener("change", function () {
      const allowed = ["pdf", "doc", "docx", "png"];
      const fileName = fileInput.value.split("\\").pop();
      const ext = fileName ? fileName.split(".").pop().toLowerCase() : "";
      uploadBtn.disabled = !allowed.includes(ext);
    });
  }
});

9.File: templates/base.html:
<!DOCTYPE html>
<html lang="en">
  
<head>
    <meta charset="UTF-8">
    <title>Hospital Management System</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/validation.js') }}"></script>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
  <div class="container-fluid">
    <a class="navbar-brand" href="{{ url_for('auth.dashboard') }}">Hospital System</a>
    <div class="collapse navbar-collapse">
      <ul class="navbar-nav ms-auto">
        {% if current_user.is_authenticated %}
          <li class="nav-item"><a class="nav-link" href="{{ url_for('appointment.create_appointment') }}">Create Appointment</a></li>
          {% if current_user.role in ['admin', 'doctor'] %}
            <li class="nav-item"><a class="nav-link" href="{{ url_for('appointment.view_appointments') }}">View Appointments</a></li>
          {% endif %}
          <li class="nav-item"><a class="nav-link" href="{{ url_for('report.upload_report') }}">Upload Report</a></li>
          <li class="nav-item"><a class="nav-link text-warning" href="{{ url_for('auth.logout') }}">Logout</a></li>
        {% endif %}
      </ul>
    </div>
  </div>
</nav>
<div class="container mt-4">
  {% with messages = get_flashed_messages(with_categories=true) %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">{{ message }}</div>
    {% endfor %}
  {% endwith %}
  {% block content %}{% endblock %}
</div>
</body>
</html>

10.File: templates/create_appointment.html:
{% extends "base.html" %}
{% block content %}
<h2>Create Appointment</h2>
<form method="POST">
  <div class="mb-3">
    <label>Choose Doctor</label>
    <select name="doctor_id" class="form-control" required>
      {% for doctor in doctors %}
        <option value="{{ doctor.id }}">{{ doctor.username }}</option>
      {% endfor %}
    </select>
  </div>
  <div class="mb-3">
    <label>Reason</label>
    <textarea name="reason" class="form-control" required></textarea>
  </div>

<div class="form-group">
  <label for="appointment_date">Appointment Date</label>
  <input type="date" class="form-control" id="appointment_date" name="appointment_date" required>
</div>

<div class="form-group">
  <label for="appointment_time">Appointment Time</label>
  <input type="time" class="form-control" id="appointment_time" name="appointment_time" required>
</div>


  <button type="submit" class="btn btn-primary">Book Appointment</button>

</form>
{% endblock %}

11.File: templates/dashboard.html:
{% extends "base.html" %}
{% block content %}
<h3>Welcome, {{ user.username }} ({{ user.role|capitalize }})</h3>
<p>Use the menu to navigate.</p>

<div class="row">
  <div class="col-md-4">
    <div class="card text-bg-info mb-3">
      <div class="card-body">
        <h5 class="card-title">Your Role</h5>
        <p class="card-text">{{ user.role.capitalize() }}</p>
      </div>
    </div>
  </div>
</div>

{% endblock %}

12.File: templates/edit_appointment.html:
{% extends "base.html" %}

{% block content %}
<h2>Edit Appointment</h2>

<form method="POST">
  <div class="mb-3">
    <label for="reason" class="form-label">Reason</label>
    <input type="text" class="form-control" name="reason" id="reason" value="{{ appointment.reason }}" required>
  </div>
  <button type="submit" class="btn btn-primary">Update</button>
  <a href="{{ url_for('appointment.view_appointments') }}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}


13.File: templates/login.html:
{% extends "base.html" %}
{% block content %}
<h2>Login</h2>
<form method="POST">
  <div class="mb-3">
    <label>Username</label>
    <input type="text" class="form-control" name="username" required>
  </div>
  <div class="mb-3">
    <label>Password</label>
    <input type="password" class="form-control" name="password" required>
  </div>
  <button type="submit" class="btn btn-primary">Login</button>
  <a href="{{ url_for('auth.register') }}" class="btn btn-link">Register</a>
</form>
{% endblock %}

14.File: templates/register.html:
{% extends "base.html" %}
{% block content %}
<h2>Create Account</h2>
<form method="POST">
  <div class="mb-3">
    <label>Username</label>
    <input type="text" class="form-control" name="username" required>
  </div>
  <div class="mb-3">
    <label>Password</label>
    <input type="password" class="form-control" name="password" required>
  </div>
  <div class="mb-3">
    <label>Role</label>
    <select name="role" class="form-control" required>
      <option value="patient">Patient</option>
      <option value="doctor">Doctor</option>
    </select>
  </div>
  <button type="submit" class="btn btn-success">Register</button>
</form>
{% endblock %}
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">{{ message }}</div>
    {% endfor %}
  {% endif %}
{% endwith %}

15.File: templates/upload_report.html:

{% extends "base.html" %}

{% block content %}
<h2>Upload Medical Report</h2>

{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    {% endfor %}
  {% endif %}
{% endwith %}

<form method="POST" enctype="multipart/form-data">
  <div class="mb-3">
    <label for="file" class="form-label">Select File (PDF, PNG, DOC, DOCX)</label>
    <input type="file" class="form-control" id="file" name="file" required>
  </div>
  <button type="submit" class="btn btn-primary">Upload Report</button>
  <a href="{{ url_for('report.view_reports') }}" class="btn btn-secondary ms-2">Back to Reports</a>
</form>
{% endblock %}

16.File: templates/view_appointments.html:
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
  <h2>Your Appointments</h2>

  <!-- Back to Dashboard Button -->
  <a href="{{ url_for('auth.dashboard') }}" class="btn btn-secondary mb-3">Back to Dashboard</a>

  <table class="table table-bordered">
    <thead class="thead-dark">
      <tr>
        <th>Doctor ID</th>
        <th>Date</th>
        <th>Time</th>
        <th>Reason</th>
        {% if current_user.role != 'patient' %}
        <th>Patient ID</th>
        <th>Actions</th>
        {% endif %}
      </tr>
    </thead>
    <tbody>
      {% for appt in appointments %}
      <tr>
        <td>{{ appt.doctor_id }}</td>
        <td>{{ appt.date.strftime('%Y-%m-%d') }}</td>
        <td>{{ appt.date.strftime('%H:%M') }}</td>
        <td>{{ appt.reason }}</td>
        {% if current_user.role != 'patient' %}
        <td>{{ appt.patient_id }}</td>
        <td>
          <!-- Edit Button -->
          <a href="{{ url_for('appointment.edit_appointment', appointment_id=appt.id) }}" class="btn btn-sm btn-warning">Edit</a>

          <!-- Delete Button (POST method) -->
          <a href="{{ url_for('appointment.delete_appointment', appointment_id=appt.id) }}" class="btn btn-sm btn-danger"
            onclick="return confirm('Are you sure you want to delete this appointment?');">Delete</a>

        </td>
        {% endif %}
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}

17.File: templates/view_reports.html:

{% extends "base.html" %}

{% block content %}
<h2>Your Medical Reports</h2>

{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    {% endfor %}
  {% endif %}
{% endwith %}

{% if reports %}
  <table class="table table-bordered bg-white shadow-sm">
    <thead class="table-light">
      <tr>
        <th>#</th>
        <th>Filename</th>
        <th>Uploaded On</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      {% for report in reports %}
      <tr>
        <td>{{ loop.index }}</td>
        <td>{{ report.filename }}</td>
        <td>{{ report.upload_date.strftime('%Y-%m-%d') if report.upload_date else 'N/A' }}</td>
        <td>
          <a href="{{ url_for('report.download_report', filename=report.filename) }}" class="btn btn-sm btn-success">Download</a>
          <a href="{{ url_for('report.delete_report', report_id=report.id) }}" class="btn btn-sm btn-danger"
             onclick="return confirm('Are you sure you want to delete this report?');">Delete</a>
        </td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
{% else %}
  <p>No reports uploaded yet.</p>
{% endif %}

<a href="{{ url_for('report.upload_report') }}" class="btn btn-primary">Upload New Report</a>
{% endblock %}

18.File: app/__init__.py:
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate
from config import Config
import os
from app.controllers.chatbot_controller import chatbot_bp

db = SQLAlchemy()
login_manager = LoginManager()
login_manager.login_view = 'auth.login'
migrate = Migrate()

def create_app():
    app = Flask(__name__)
    app.secret_key = "your_secret_key"

    app.config.from_object(Config)

    from app.controllers.chatbot_controller import chatbot_bp
    app.register_blueprint(chatbot_bp)

    # Ensure upload folder exists
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])

    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)

    # Register blueprints
    from app.controllers.auth_controller import auth_bp
    from app.controllers.appointment_controller import appointment_bp
    from app.controllers.report_controller import report_bp

    app.register_blueprint(auth_bp)
    app.register_blueprint(appointment_bp)
    app.register_blueprint(report_bp)

    return app

19.File: config.py:
import os

UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your_secret_key_here'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(BASE_DIR, 'hospital.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
    ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx', 'png', 'jpg', 'jpeg'}
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16 MB limit for file uploads
    DEBUG = True

20.File: database.db:
no code

21.File: hospital.db:
no code but all datas are stored here

22.File: init_db.py:
from app import create_app, db
from app.models.user import User
from werkzeug.security import generate_password_hash

app = create_app()

with app.app_context():
    db.create_all()
    print(" Tables created successfully!")

    # Check if default admin already exists
    if not User.query.filter_by(username='admin123').first():
        admin_user = User(
            username='admin123',
            password=generate_password_hash('adminpass', method='pbkdf2:sha256'),
            role='admin'
        )
        db.session.add(admin_user)
        db.session.commit()
        print(" Default admin user created! (username: admin123, password: adminpass)")
    else:
        print(" Default admin user already exists.")

23.File: run.py:
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


24.file: chatbot_controller.py:
import requests
from flask import Blueprint, render_template, request

chatbot_bp = Blueprint('chatbot', __name__)

@chatbot_bp.route('/chat', methods=['GET', 'POST'])
def chat():
    response = ""
    if request.method == 'POST':
        user_input = request.form['user_input']

        try:
            # Construct the full prompt
            prompt = f"""
You are a helpful and professional medical assistant.
A user just described the following symptoms:

{user_input}

Please analyze the symptoms and:
1. Suggest possible causes.
2. Give basic precautions or remedies.
3. If unclear, ask the user for more details.
4. End with a short conclusion.
"""

            # Make POST request to Ollama
            result = requests.post(
                'http://localhost:11434/api/generate',
                json={
                    "model": "llama2",
                    "prompt": prompt,
                    "stream": False
                },
                timeout=60  # Increase timeout (default is 10s)
            )

            data = result.json()
            response = data.get("response", "❌ No response from model.")
        except requests.exceptions.Timeout:
            response = "⚠️ The request to LLM timed out. Please try again."
        except Exception as e:
            response = f"❌ Error: {str(e)}"

    return render_template('chat.html', response=response)


25.file: chat.css:
body {
    font-family: Arial, sans-serif;
    background: #f0f4f8;
}

.chat-container {
    max-width: 600px;
    margin: 40px auto;
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 0 10px #ccc;
}

.chat-box {
    height: 300px;
    overflow-y: auto;
    border: 1px solid #ddd;
    padding: 10px;
    margin-bottom: 10px;
    background-color: #fafafa;
}

.user-msg, .bot-msg {
    margin: 8px 0;
    padding: 6px 10px;
    border-radius: 6px;
}

.user-msg {
    background: #e0f7fa;
    text-align: left;
}

.bot-msg {
    background: #ede7f6;
    text-align: left;
}